{{- /*

Copyright The CloudNativePG Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/ -}}

{{- /* Create Operator's Deployment */ -}}

{{- $should := include "cloudnative-pg.operator.shouldDeployment" . }}
{{- $shouldConfig := include "cloudnative-pg.operator.shouldConfiguration" . }}

{{- if eq $should "true" }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cloudnative-pg.fullname" . }}
  labels:
    {{- include "cloudnative-pg.labels" . | nindent 4 }}
  {{- with .Values.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.operator.deployment.replicaCount }}
  selector:
    matchLabels:
      {{- include "cloudnative-pg.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/operator/config.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "cloudnative-pg.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.operator.deployment.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.operator.deployment.hostNetwork }}
      hostNetwork: {{ .Values.operator.deployment.hostNetwork }}
      {{- end }}
      {{- if .Values.operator.deployment.dnsPolicy }}
      dnsPolicy: {{ .Values.operator.deployment.dnsPolicy }}
      {{- end }}
      containers:
      - args:
        - controller
        - --leader-elect
        {{- if eq $shouldConfig "true" }}
        {{- if not .Values.operator.configuration.secret }}
        - --config-map-name={{ include "cloudnative-pg.configurationName" . }}
        {{- else }}
        - --secret-name={{ include "cloudnative-pg.configurationName" . }}
        {{- end }}
        {{- end }}
        - --webhook-port={{ .Values.cluster.webhooks.port }}
        {{- range .Values.operator.deployment.additionalArgs }}
        - {{ . }}
        {{- end }}
        command:
        - /manager
        env:
        - name: OPERATOR_IMAGE_NAME
          value: "{{ .Values.operator.deployment.image.repository }}:{{ .Values.operator.deployment.image.tag | default .Chart.AppVersion }}"
        - name: OPERATOR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OPERATOR_SELECTOR
          value: {{ include "cloudnative-pg.operatorSelector" . | quote }}
        - name: MONITORING_QUERIES_CONFIGMAP
          value: "{{ include "cloudnative-pg.monitoringName" . }}"
        - name: WEBHOOK_SERVICE_NAME
          value: "{{ include "cloudnative-pg.serviceName" . }}"
        - name: MUTATING_WEBHOOK_NAME
          value: "{{ include "cloudnative-pg.mutatingWebhookName" . }}"
        - name: VALIDATING_WEBHOOK_NAME
          value: "{{ include "cloudnative-pg.validationWebhookName" . }}"
        - name: WATCH_NAMESPACE
          value: "{{ .Values.managedNamespaces | join "," }}"
        {{- if .Values.operator.deployment.additionalEnv }}
        {{- tpl (.Values.operator.deployment.additionalEnv | toYaml) . | nindent 8 }}
        {{- end }}
        image: "{{ .Values.operator.deployment.image.repository }}:{{ .Values.operator.deployment.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.operator.deployment.image.pullPolicy }}
        livenessProbe:
          httpGet:
            path: /readyz
            port: {{ .Values.operator.deployment.port }}
            scheme: HTTPS
          {{- if .Values.operator.deployment.livenessProbe.initialDelaySeconds }}
          initialDelaySeconds: {{ .Values.operator.deployment.livenessProbe.initialDelaySeconds }}
          {{- end }}
        name: manager
        ports:
        - containerPort: 8080
          name: metrics
          protocol: TCP
        - containerPort: {{ .Values.operator.deployment.port }}
          name: webhook-server
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: {{ .Values.operator.deployment.port }}
            scheme: HTTPS
          {{- if .Values.operator.deployment.readinessProbe.initialDelaySeconds }}
          initialDelaySeconds: {{ .Values.operator.deployment.readinessProbe.initialDelaySeconds }}
          {{- end }}
        resources:
          {{- toYaml .Values.operator.deployment.resources | nindent 10 }}
        securityContext:
          {{- toYaml .Values.operator.deployment.containerSecurityContext | nindent 10 }}
        volumeMounts:
        - mountPath: /controller
          name: scratch-data
        - mountPath: /run/secrets/cnpg.io/webhook
          name: webhook-certificates
      {{- if .Values.operator.deployment.priorityClassName }}
      priorityClassName: {{ .Values.operator.deployment.priorityClassName }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.operator.deployment.podSecurityContext | nindent 8 }}
      serviceAccountName: {{ include "cloudnative-pg.serviceAccountName" . }}
      terminationGracePeriodSeconds: 10
      {{- with .Values.operator.deployment.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.operator.deployment.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.operator.deployment.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - emptyDir: {}
        name: scratch-data
      - name: webhook-certificates
        secret:
          defaultMode: 420
          optional: true
          secretName: cnpg-webhook-cert
{{- end }}